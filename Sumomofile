certificate = ENV["SHINONOME_API_CERT"]
key = ENV["CLOUDFLARE_KEY"]
email = ENV["CLOUDFLARE_EMAIL"]

ui_url = "rubymusic.shinonome.astrobunny.net"
api_url = "rubymusic-api.shinonome.astrobunny.net"

if ENV["CLOUDFLARE_EMAIL"]

    config_contents = File.read("ui/main.j")

    File.write("ui/main.j", config_contents.gsub("http://192.168.1.15:5000", "https://#{api_url}"))

    `cd ui && bundle exec chino build`
    `cp ui/favicon.ico ui/build/`

    File.write("ui/main.j", config_contents)

end

cdn = make_cdn_from_dir(
    cert: certificate,
    domain: ui_url, 
    dns: cloudflare_dns(key: key, email: email), 
    dir: "ui/build", 
    low_ttl: ["*.sj"])

api = make_api api_url,
    name: "RubyMusicControlAPI",
    cert: certificate,
    dns: cloudflare_dns(key: key, email: email),
    with_statements: [
        {
            "Effect" => "Allow",
            "Action" => ["s3:DeleteObject", "s3:GetObject", "s3:PutObject"],
            "Resource" => "arn:aws:s3:::rubymusic-repository/*"
        }
    ] do

    SCRIPT <<-SCRIPT
        const crypto = require("crypto");
        const protocol = {
            https: require('https'),
            http: require('http')
        }
        const URL = require('url').URL;

        function get_library_data(type, on_complete)
        {
            Store.get("libraries/" + type,
                function(data)
                {
                    on_complete(data);
                },
                function(error)
                {
                    on_complete({});
                })
        }

        function get_list_data(type, list_id, on_complete)
        {
            get_library_data(type, function(lib_data)
            {
                Store.get("lists/" + type + "/" + list_id,
                    function(data)
                    {
                        var items = {};

                        var count = 0;
                        for(var key in data)
                        {
                            var item_id = data[key];
                            var item = lib_data[item_id];
                            items[count++] = item;
                        }

                        on_complete(items, lib_data);
                    },
                    function(error)
                    {
                        on_complete({}, lib_data);
                    })
            });
        }

        function add_item_to_list(type, list_id, item_ids, position, on_complete, on_error)
        {
            get_list_data(type, list_id, function(items, lib_data)
            {
                var item_array = Object.keys(items).map(function(x){ return items[x].id })
                var new_array = []

                for (var idx in item_ids)
                {
                    if (!lib_data[item_ids[idx]])
                    {
                        return on_error({error: "no such item: "+item_ids[idx]});
                    }
                }

                if (position < 0 || position > item_array.length)
                {
                    return on_error({error: "invalid position"});
                }

                var i=0;

                // Insert items before
                for(i=0;i<position && i<item_array.length;i++)
                {
                    new_array.push(item_array[i])
                }

                // Insert dragged items
                for (i=0; i<item_ids.length; ++i)
                {
                    new_array.push(item_ids[i])
                }

                for(i=position;i<item_array.length;i++)
                {
                    new_array.push(item_array[i])
                }

                Store.set("lists/" + type + "/" + list_id, new_array,
                    function(data)
                    {
                        on_complete(data);
                    },
                    function(error)
                    {
                        on_error(error);
                    })
            })
        }

        function move_item_in_list(type, list_id, old_positions, position, on_complete, on_error)
        {
            old_positions = old_positions.map(function(x){return parseInt(x)});

            get_list_data(type, list_id, function(items, lib_data)
            {
                var item_array = Object.keys(items).map(function(x){ return items[x].id })
                var new_array = []

                if (position < 0 || position > item_array.length)
                {
                    return on_error({error: "invalid position"});
                }

                // Insert items before
                var i=0;
                for(i=0;i<position && i<item_array.length;i++)
                {
                    if (old_positions.indexOf(i) != -1)
                    {
                        continue;
                    }
                    new_array.push(item_array[i]);
                }

                for (var idx in old_positions)
                {
                    if (old_positions[idx] < 0 || old_positions[idx] >= item_array.length)
                    {
                        return on_error({error: "invalid old position"});
                    }

                    // Insert dragged items
                    new_array.push(item_array[old_positions[idx]])
                }

                for(i=position;i<item_array.length;i++)
                {
                    if (old_positions.indexOf(i) != -1)
                    {
                        continue;
                    }
                    new_array.push(item_array[i])
                }

                Store.set("lists/" + type + "/" + list_id, new_array,
                    function(data)
                    {
                        on_complete(data);
                    },
                    function(error)
                    {
                        on_error(error);
                    })
            })
        }

        function delete_item_in_list(type, list_id, positions, on_complete, on_error)
        {
            positions = positions.map(function(x){return parseInt(x)});

            get_list_data(type, list_id, function(items, lib_data)
            {
                var item_array = Object.keys(items).map(function(x){ return items[x].id })
                var new_array = []

                // Insert items before
                var i=0;
                for(i=0;i<item_array.length;i++)
                {
                    if (positions.indexOf(i) != -1)
                    {
                        continue;
                    }
                    new_array.push(item_array[i]);
                }

                Store.set("lists/" + type + "/" + list_id, new_array,
                    function(data)
                    {
                        on_complete(data);
                    },
                    function(error)
                    {
                        on_error(error);
                    })
            })
        }

        function modify_library_data(type, id, field, value, on_complete, on_error)
        {
            get_library_data(type, function(data)
            {
                if (!data[id])
                {
                    return on_error({error: "no such id"});
                }

                var changed = data[id][field] !== value;
                data[id][field] = value;

                Store.set("libraries/" + type, data,
                    function()
                    {
                        on_complete(data, changed);
                    },
                    function(error)
                    {
                        on_error(error);
                    })
            });
        }

        function add_library_row(type, new_row, on_complete, on_error)
        {
            get_library_data(type, function(data)
            {
                crypto.randomBytes(16, function(err, buffer) {
                    var token = buffer.toString('hex');
                    new_row.id = token;
                    data[token] = new_row
                    Store.set("libraries/" + type, data,
                        function()
                        {
                            on_complete(data);
                        },
                        function(error)
                        {
                            on_error(error);
                        })
                });
            })
        }

        function convert_data(data, sort)
        {
            var keys = Object.keys(data);
            var result = {};

            var temp_array = [];
            for (var key in data)
            {
                temp_array.push(data[key]);
            }

            var idx = 0;
            var sort_info = sort.split(",").filter(function(el) {return el.length > 1});

            for(idx=0;idx<sort_info.length;idx++)
            {
                var tokens = sort_info[idx].split(":");
                var field = tokens[0];
                var asc = tokens[1] === "a" ? 1 : -1;
                try
                {
                    temp_array.sort(function(a,b)
                    {
                        if (typeof a[field] === "string")
                        {
                            return asc * (a[field].localeCompare(b[field]));
                        }
                        return asc * ((""+a[field]).localeCompare(""+b[field]));
                    })   
                }
                catch (e)
                {
                    console.log("cannot sort", sort_info[idx])
                    console.log(e)
                }
            }

            for(idx=0;idx<temp_array.length;idx++)
            {
                result[idx] = temp_array[idx];
            }

            return {data: result, length: temp_array.length}
        }

        function send_playlist_to_bot(id, playlist, on_complete, on_error)
        {
            get_library_data("bots", function(data) {
                var bot = data[id];

                var bot_url = new URL(bot.location + '/playlist?token=' + bot.token);
                var proto = protocol[bot_url.protocol.replace(":", "")];

                var postData = JSON.stringify(playlist);

                var options = {
                    hostname: bot_url.hostname,
                    port: bot_url.port,
                    path: bot_url.pathname + bot_url.search,
                    method: 'PUT',
                    headers: {
                        'Host': bot_url.hostname,
                        'Content-Type': 'application/json',
                        'Content-Length': Buffer.byteLength(postData, 'utf8')
                    }
                };

                var req = proto.request(options, function (res) {
                    //console.log('STATUS:', res.statusCode);
                    //console.log('HEADERS:', JSON.stringify(res.headers));

                    res.setEncoding('utf8');

                    res.on('data', function (chunk) {
                        console.log('BODY:', chunk);
                    });

                    res.on('end', function () {
                        on_complete();
                        //console.log('No more data in response.');
                    });
                });

                req.on('error', function (e) {
                    console.log(bot.location)
                    console.log('Problem with request:', e.message);
                    on_error(e);
                });

                req.write(postData);
                req.end();
            });
        }

        function set_bot_playing(id, is_playing, on_complete, on_error)
        {
            get_library_data("bots", function(data) {
                var bot = data[id];

                var command = is_playing ? "play" : "stop";

                var bot_url = new URL(bot.location);
                var proto = protocol[bot_url.protocol.replace(":", "")];

                proto.get(bot.location + '/' + command + '?token=' + bot.token, (resp) => 
                    {
                        on_complete();
                    }).
                    on("error", (err) => {
                        console.log(bot.location)
                        console.log('Problem with set to', command, ':', e.message);
                        on_error(err);
                    });;
            });
        }

        function set_playlist_to_everything_on_bot(id, on_complete, on_error)
        {            
            get_library_data("songs", function(data) {
                send_playlist_to_bot(id, {playlist: data}, on_complete, on_error)
            });
        }

        function check_bot(id)
        {
            get_library_data("bots", function(data) {
                var bot = data[id];

                var bot_url = new URL(bot.location + '/?token=' + bot.token);
                var proto = protocol[bot_url.protocol.replace(":", "")];

                set_bot_playing(id, bot.playing, function(){}, function(err){});

                proto.get(bot.location + '/?token=' + bot.token, (resp) => {

                    var bot_resp = ""

                    // A chunk of data has been recieved.
                    resp.on('data', (chunk) => {
                        bot_resp += chunk;
                    });

                    // The whole response has been received. Print out the result.
                    resp.on('end', () => {
                        try
                        {
                            var bot_response = JSON.parse(bot_resp);
                            modify_library_data("bots", id, "reachable", 1,
                                function(data){},
                                function(error){});
                            modify_library_data("bots", id, "status", bot_response.status,
                                function(data){},
                                function(error){});
                        }
                        catch(e)
                        {
                            console.log("check bot error")
                            console.log(e)
                        }
                    });

                }).on("error", (err) => {
                    modify_library_data("bots", id, "reachable", 0,
                        function(data)
                        {

                        },
                        function(error)
                        {
                        });
                });
            });
        }

    SCRIPT

    def AUTH(method, path, *args)
        inner_script = args.last

        the_script = <<-SCRIPT

        Store.get("tokens/"+api_token,
        function(data)
        {
            Store.get("users/"+data.user,
            function(data)
            {
                if (data.api_token === api_token)
                {
#{inner_script}
                }
                else
                {
                    respond_with ({message: "not_found"}, 404);
                }
            },
            function(err)
            {
                respond_with ({message: "not_found"}, 404);
            })
        },
        function(err)
        {
            respond_with ({message: "not_found"}, 404);
        })

        SCRIPT

        argv = [path, :api_token] + args[0..-2] + [the_script]

        self.send(:"#{method}", *argv )
    end

    def AUTH_GET(path, *args)
        AUTH("GET", path, *args)
    end

    def AUTH_POST(path, *args)
        AUTH("POST", path, *args)
    end

    def AUTH_PUT(path, *args)
        AUTH("PUT", path, *args)
    end

    def AUTH_DELETE(path, *args)
        AUTH("DELETE", path, *args)
    end

    AUTH_GET "/api/session", <<-SCRIPT
        respond_with ({message: "ok", api_token: data.api_token}, 200);
    SCRIPT

    AUTH_GET "/api/bots/library", :item, :sort, <<-SCRIPT
        get_library_data("bots", function(data)
        {
            var result = convert_data(data, sort)
            respond_with ({message: "ok", data: result.data, data_length: result.length, data_type: "bots"}, 200);
        });
    SCRIPT

    AUTH_POST "/api/bots/library", <<-SCRIPT

        add_library_row("bots", 
            {
                name: "<name>",
                token: "<token>",
                location: "<location>",
                playlist: "",
                playing: 0,
                reachable: 0,
                status: ""
            },
            function(data)
            {
                respond_with ({message: "created"}, 201);
            },
            function(error)
            {
                console.log(error)
                respond_with ({message: "internal_error"}, 500);  
            });
    SCRIPT

    AUTH_POST "/api/bots/library/modify", :id, :field, :value, <<-SCRIPT
        modify_library_data("bots", id, field, value,
            function(data, changed)
            {
                check_bot(id);

                if (field === "playlist")
                {
                    function completion_confirmed()
                    {
                        set_bot_playing(id, false, function()
                        {

                            set_bot_playing(id, true, function()
                            {

                            }, function(err){});

                        }, function(err){});
                    }

                    function error_received(err)
                    {
                        console.log(err)
                    }

                    if (changed)
                    {
                        if (value === 0)
                        {
                            set_playlist_to_everything_on_bot(id, completion_confirmed, error_received)
                        }
                        else
                        {
                            get_library_data("playlists", function(data)
                            {
                                var result = convert_data(data, "");

                                get_list_data("songs", result.data[value-1].id, function(data)
                                {
                                    send_playlist_to_bot(id, {playlist: data}, completion_confirmed, error_received)
                                });
                            });
                        }
                    }
                }
                

                respond_with ({message: "ok"}, 200);
            },
            function(error)
            {
                console.log(error)
                respond_with ({message: "internal_error"}, 500);  
            });
    SCRIPT

    AUTH_GET "/api/songs/list", :list, <<-SCRIPT
        get_list_data("songs", list || "default", function(data)
        {
            var result = convert_data(data, "")
            respond_with ({message: "ok", data: result.data, data_length: result.length, data_type: "songs"}, 200);
        });
    SCRIPT

    AUTH_POST "/api/songs/list", :list, :ids, :to_pos, <<-SCRIPT
        add_item_to_list("songs", list || "default", ids, to_pos, function(data)
        {
            respond_with ({message: "created"}, 201);

        }, function(error)
        {
            respond_with ({message: error}, 400);
        });
    SCRIPT

    AUTH_POST "/api/songs/list/move", :list, :ords, :to_pos, <<-SCRIPT
        move_item_in_list("songs", list, ords, to_pos, function(data)
        {
            respond_with ({message: "ok"}, 200);

        }, function(error)
        {
            respond_with ({message: error}, 400);
        });
    SCRIPT

    AUTH_DELETE "/api/songs/list", :list, :ords, <<-SCRIPT
        delete_item_in_list("songs", list, ords, function(data)
        {
            respond_with ({message: "ok"}, 200);

        }, function(error)
        {
            respond_with ({message: error}, 400);
        });
    SCRIPT

    AUTH_GET "/api/songs/library", :item, :sort, <<-SCRIPT
        get_library_data("songs", function(data)
        {
            var result = convert_data(data, sort)
            respond_with ({message: "ok", data: result.data, data_length: result.length, data_type: "songs"}, 200);
        });
    SCRIPT

    AUTH_POST "/api/songs/library", <<-SCRIPT
        add_library_row("songs", 
            {
                name: "<name>",
                artist_name: "<artist_name>",
                url: "<url>",
                tags: []
            },
            function(data)
            {
                respond_with ({message: "created"}, 201);
            },
            function(error)
            {
                console.log(error)
                respond_with ({message: "internal_error"}, 500);  
            });
    SCRIPT

    AUTH_POST "/api/songs/library/modify", :id, :field, :value, <<-SCRIPT
        modify_library_data("songs", id, field, value,
            function(data)
            {
                respond_with ({message: "ok"}, 200);
            },
            function(error)
            {
                console.log(error)
                respond_with ({message: "internal_error"}, 500);  
            });
    SCRIPT

    AUTH_GET "/api/playlists/library", :item, :sort, <<-SCRIPT
        get_library_data("playlists", function(data)
        {
            var result = convert_data(data, sort)
            respond_with ({message: "ok", data: result.data, data_length: result.length, data_type: "playlists"}, 200);
        });
    SCRIPT

    AUTH_POST "/api/playlists/library", <<-SCRIPT
        add_library_row("playlists", 
            {
                name: "<name>"
            },
            function(data)
            {
                respond_with ({message: "created"}, 201);
            },
            function(error)
            {
                console.log(error)
                respond_with ({message: "internal_error"}, 500);  
            });
    SCRIPT

    AUTH_POST "/api/playlists/library/modify", :id, :field, :value, <<-SCRIPT
        modify_library_data("playlists", id, field, value,
            function(data)
            {
                respond_with ({message: "ok"}, 200);
            },
            function(error)
            {
                console.log(error)
                respond_with ({message: "internal_error"}, 500);  
            });
    SCRIPT

    POST "/api/session", :username, :password, <<-SCRIPT

        Store.get("users/"+username,
        function(data)
        {
            const hash = crypto.createHash('sha256', "")
                               .update(password)
                               .update(data.salt)
                               .digest('hex');

            if (hash === data.password_hash)
            {
                crypto.randomBytes(16, (err, buf) => {
                    if (err) throw err;
                    data.api_token = buf.toString('hex')

                    Store.set("users/"+username, data,
                    function()
                    {
                        Store.set("tokens/"+data.api_token, {user: data.username},
                        function()
                        {
                            respond_with ({message: "ok", api_token: data.api_token}, 200);
                        },
                        function(err)
                        {
                            console.log("Error saving token")
                            respond_with ({message: "not_found"}, 404);
                        });
                    },
                    function(err)
                    {
                        console.log("Error saving user")
                        respond_with ({message: "not_found"}, 404);
                    });
                });
            }
            else
            {
                respond_with ({message: "not_found"}, 404);
            }

        },
        function(err)
        {
            respond_with ({message: "not_found"}, 404);
        })

    SCRIPT

    

end

output "DistroHost", ui_url
output "APIURL", api
