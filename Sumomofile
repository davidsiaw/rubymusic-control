certificate = ENV["SHINONOME_API_CERT"]
key = ENV["CLOUDFLARE_KEY"]
email = ENV["CLOUDFLARE_EMAIL"]

ui_url = "rubymusic.shinonome.astrobunny.net"
api_url = "rubymusic-api.shinonome.astrobunny.net"

if ENV["CLOUDFLARE_EMAIL"]

    config_contents = File.read("ui/main.j")

    File.write("ui/main.j", config_contents.gsub("http://192.168.1.15:5000", "https://#{api_url}"))

    `cd ui && bundle exec chino build`
    `cp ui/favicon.ico ui/build/`

    File.write("ui/main.j", config_contents)

end

cdn = make_cdn_from_dir(
    cert: certificate,
    domain: ui_url, 
    dns: cloudflare_dns(key: key, email: email), 
    dir: "ui/build", 
    low_ttl: ["*.sj"])

api = make_api api_url,
    name: "RubyMusicControlAPI",
    cert: certificate,
    dns: cloudflare_dns(key: key, email: email),
    with_statements: [
        {
            "Effect" => "Allow",
            "Action" => ["s3:DeleteObject", "s3:GetObject", "s3:PutObject"],
            "Resource" => "arn:aws:s3:::rubymusic-repository/*"
        }
    ] do

    SCRIPT <<-SCRIPT
        const crypto = require("crypto");
    SCRIPT

    GET "/api/session", :api_token, <<-SCRIPT
        Store.get("tokens/"+api_token,
        function(data)
        {
            Store.get("users/"+data.user,
            function(data)
            {
                if (data.api_token === api_token)
                {
                    respond_with ({message: "ok", api_token: data.api_token}, 200);
                }
                else
                {
                    respond_with ({message: "not_found"}, 404);
                }
            },
            function(err)
            {
                respond_with ({message: "not_found"}, 404);
            })
        },
        function(err)
        {
            respond_with ({message: "not_found"}, 404);
        })

    SCRIPT

    POST "/api/session", :username, :password, <<-SCRIPT

        Store.get("users/"+username,
        function(data)
        {
            const hash = crypto.createHash('sha256', "")
                               .update(password)
                               .update(data.salt)
                               .digest('hex');

            if (hash === data.password_hash)
            {
                crypto.randomBytes(16, (err, buf) => {
                    if (err) throw err;
                    data.api_token = buf.toString('hex')

                    Store.set("users/"+username, data,
                    function()
                    {
                        Store.set("tokens/"+data.api_token, {user: data.username},
                        function()
                        {
                            respond_with ({message: "ok", api_token: data.api_token}, 200);
                        },
                        function(err)
                        {
                            console.log("Error saving token")
                            respond_with ({message: "not_found"}, 404);
                        });
                    },
                    function(err)
                    {
                        console.log("Error saving user")
                        respond_with ({message: "not_found"}, 404);
                    });
                });
            }
            else
            {
                respond_with ({message: "not_found"}, 404);
            }

        },
        function(err)
        {
            respond_with ({message: "not_found"}, 404);
        })

    SCRIPT

end

output "DistroHost", ui_url
output "APIURL", api
